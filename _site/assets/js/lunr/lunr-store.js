var store = [{
        "title": "Welcome to Jekyll!",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   # this is code print (\"Hello World!\")  # End   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["jekyll","update"],
        "tags": [],
        "url": "/jekyll/update/welcome-to-jekyll/",
        "teaser": "/assets/images/500x300_teaser.jpg"
      },{
        "title": "Jekyll und GitHub Pages als Blog einrichten",
        "excerpt":"GitHub bietet neben dem Code Repository auch die Möglichkeit Webseiten für seine Projekte zu hosten.   Quintessenz  Die Webseiten werden dabei aus dem GitHub Repository erstellt. Das GitHub Repo https://github.com/DXorSX/dxorsx.github.io wird zur Webseite https://dxorsx.github.io/   Der Schnellstart ist hier perfekt erklärt.     Achtung: Das Repo muss exakt so heißen wie die spätere GitHub.io Page!    Nachfolgend die Einrichtung im Schnelldurchlauf nachdem ihr ein leeres GitHub Repository angelegt habt, Details siehe weiter unten       # Repository lokal clonen     git clone https://github.com/dxorsx/dxorsx.github.io     cd dxorsx.github.io     # Jeykll initiieren     jekyll new .     # Die geänderten Inhalte zurück in das Repository pushen     git add --all     git commit -m \"Initial commit\"     git push -u origin main     Nachdem die GitHub Action gelaufen ist finden sich die Inhalte auf https://dxorsx.github.io/.      Hinweis: dxorsx ist mein GitHub Username. Wollt ihr das nachvollziehen müsst ihr dxorsx durch euren GitHub Username ersetzen.      Jekyll als WebSite Generator  Jekyll ist ein Ruby programmierter Parser der aus Plaintext Dateien eine statische Webseite baut. Einmal konfiguriert und aufgesetzt könnt ihr Inhalte in simplen Text Dateien ablegen und Jekyll kümmert sich darum das alles hübsch formatiert, verlinkt und erreichbar ist.   Jekyll bietet sich für die Nutzung auf GitHub Pages weil es von den GitHub Action unterstützt wird. Das heißt der Jekyll Parser wird in der GitHub Action ausgeführt. Trotz der guten Dokumentation habe ich einige Iterationen gebraucht um ein für mich funktionierende Setup zu finden.   Nachfolgend die Schritte die ich durchgeführt habe, die jeweils aktuelles Konfiguration findet ihr in meine GitHub Repo.   Schritt 1: Erstellen einer lokalen Arbeitsumgebung  Ich beschreibe das Vorgehen anhand einer Debian Linux Umgebung. Wenn ihr etwas anderes verwendet (Windows/macOS/FreeBSD etc.) schaut in die Jekyll Installationsanleitung.   Installiere notwendige Pakete:       sudo apt update     sudo apt install ruby-full build-essential zlib1g-dev     Mit Ruby haben wir auch den Ruby Package Manager “gem” bekommen. Diesen konfigurieren wir:       echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrc     echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc     echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc     source ~/.bashrc     und installieren anschließen Jekyll:       gem install jekyll bundler     Schritt 2: Gemfile anpassen  Das Gemfile editieren und den Eintrag gem \"jekyll\" mit einem # auskommentieren und die Zeile gem \"github-pages\" ergänzen. Da ich das Jekyll Template Minimal Mistakes nutze kommen bei mir noch die Einträge gem \"minimal-mistakes-jekyll\" und gem \"jekyll-remote-theme\" hinzu.       source \"https://rubygems.org\"     # Hello! This is where you manage which Jekyll version is used to run.     # When you want to use a different version, change it below, save the     # file and run `bundle install`. Run Jekyll with `bundle exec`, like so:     #     #     bundle exec jekyll serve     #     # This will help ensure the proper Jekyll version is running.     # Happy Jekylling!     # gem \"jekyll\", \"~&gt; 4.3.1\"     gem \"github-pages\"     # This is the default theme for new Jekyll sites. You may change this to anything you like.     # gem \"minima\", \"~&gt; 2.5\"     gem \"minimal-mistakes-jekyll\"     gem \"jekyll-remote-theme\"     # If you want to use GitHub Pages, remove the \"gem \"jekyll\"\" above and     # uncomment the line below. To upgrade, run `bundle update github-pages`.     # gem \"github-pages\", group: :jekyll_plugins     # If you have any plugins, put them here!     group :jekyll_plugins do       gem \"jekyll-feed\", \"~&gt; 0.12\"     end      # Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem     # and associated library.     platforms :mingw, :x64_mingw, :mswin, :jruby do       gem \"tzinfo\", \"&gt;= 1\", \"&lt; 3\"       gem \"tzinfo-data\"     end      # Performance-booster for watching directories on Windows     gem \"wdm\", \"~&gt; 0.1.1\", :platforms =&gt; [:mingw, :x64_mingw, :mswin]      # Lock `http_parser.rb` gem to `v0.6.x` on JRuby builds since newer versions of the gem     # do not have a Java counterpart.     gem \"http_parser.rb\", \"~&gt; 0.6.0\", :platforms =&gt; [:jruby]     Die aktuelle Version meines Gemfiles findet ihr im GitHub Repo.      Wichtig: Nachdem ihr das Gemfile angepasst habt müsst ihr bundle install ausführen um alles zu aktualisieren.    Schritt 3: _config.yml anpassen  Die _config.yml ist individuell und muss auch individuell angepasst werden. Ein simple Version kann so aussehen:       domain: my-site.github.io       # if you want to force HTTPS, specify the domain without the http at the start, e.g. example.com     url: https://my-site.github.io  # the base hostname and protocol for your site, e.g. http://example.com     baseurl: /REPOSITORY-NAME/      # place folder name if the site is served in a subfolder     oder wenn ihr das Minimal Mistakes Template nutzt auch viel größer _config.yml   Schritt 4: Lokal testen  Nachdem ihr alles angepasst habt bleibt der erste Testlauf, dazu bringt Jekyll einen eigenen kleinen WebServer mit den wir mit       bundle exec jekyll server     startet. Ihr könnt dann vom lokalen Rechner aus darauf zu greifen http://127.0.0.1:4000 vergesst nicht den Prozess jedes Mal neu zu starten wenn ihr etwas verändert habt.   Schritt 5: Auf GitHub veröffentlichen  Wenn ihr nun die Inhalte auf GitHub veröffentlicht:   git add --all git commit -m \"Initial commit\" git push -u origin main  Könnt ihr in eurem GitHub Repository unter Actions den Status einsehen und falls etwas schiefgeht im Logfile nach Hinweisen suchen.   ","categories": ["Blog","GitHub","Jekyll"],
        "tags": [],
        "url": "/blog/github/jekyll/Jekyll-und-GitHub-Pages-als-Blog/",
        "teaser": "/assets/images/500x300_teaser.jpg"
      },{
        "title": "DNP DS-RX1HS mit Gutenprint, Raspberry Pi und CUPS AirPrint fähig machen",
        "excerpt":"Der [DS-RX1HS][dnp-hp] von DNP ist ein 6 Zoll Fotodrucker. Mithilfe eines Raspberry Pi und ein bisschen freier Software wird der Drucker AirPrint fähig und akzeptiert Fotos direkt vom Apple iPhone.   Quintessenz   Das Vorgehen ist in wenigen Schritten umrissen:     Installation Raspberry OS auf einem RPI (= Rapberry Pi).   Konfiguration SSH und WLAN am RPI   CUPS und Gutenprint installieren, konfigurieren.   Drucker verbinden und konfigurieren   Drucken via AirPrint und HotFolder       # CUPS und GutenPrint installieren     sudo apt update     sudo apt upgrade     sudo apt install cups cups-pdf cups-tea4cups printer-driver-gutenprint wget     # CUPS Konfigurieren     sudo cupsctl --remote-admin   # Remote zugriff auf https://printbox:631 erlauben     sudo cupsctl --share-printers # Drucker freigeben     sudo cupsctl --remote-any.    # In jedem Subnetz     sudo usermod -aG lpadmin pi     sudo systemctl restart cups        Der Drucker wird via USB mit dem RPI verbunden.   Das WebInterface  https://printbox:631 öffnen und der Drucker mit folgenden Parametern anlegen            Beschreibung:\tDai Nippon Printing DS-RX1       Treiber:\tDai Nippon Printing DSRX1 - CUPS+Gutenprint v5.3.1 (farbig, 2-seitiges Drucken)       Verbindung:\tgutenprint53+usb://dnp-dsrx1/CY2D04083833       Standardeinstellungen:\tjob-sheets=none, none media=om_w288h432_104.99x162.56mm sides=one-side           Das meiste sollte CUPS direkt erkennen.   AirPrint Einrichten       pip3 install pycups     cd $(mktemp -d)     wget https://raw.githubusercontent.com/DXorSX/airprint-generate/blob/master/airprint-generate.py     ./airprint-generate.py     mv ./*.service /etc/avahi/services/     sudo systemctl restart avahi-daemon     Abfrage wieviel Drucke noch möglich sind       $(lpoptions -d DNP-DS-RX1 | sed -n 's/.*marker-message=.\\([0-9].*media\\)\\(.*\\)/\\1/p')     HotFolder Script:     https://github.com/DXorSX/HotFolder2PhotoPrinter/blob/main/hf2pp.py Cron Job to run   */5 * * * * find /home/FotoPrintUser/HotFolder/ -type f -exec /home/FotoPrintUser/send2DNP.sh “{}” \\;   [dnp-hp]        :https://www.dnpphoto.eu/de/produkte/fotodrucker/item/252-ds-rx1hs [airprint-gen]  :https://github.com/DXorSX/airprint-generate/blob/master/airprint-generate.py   Die Webseiten werden dabei aus dem GitHub Repository erstellt. Das GitHub Repo https://github.com/DXorSX/dxorsx.github.io wird zur Webseite https://dxorsx.github.io/   Der Schnellstart ist hier perfekt erklärt.     Achtung: Das Repo muss exakt so heißen wie die spätere GitHub.io Page!    Nachfolgend die Einrichtung im Schnelldurchlauf nachdem ihr ein leeres GitHub Repository angelegt habt, Details siehe weiter unten       # Repository lokal clonen     git clone https://github.com/dxorsx/dxorsx.github.io     cd dxorsx.github.io     # Jeykll initiieren     jekyll new .     # Die geänderten Inhalte zurück in das Repository pushen     git add --all     git commit -m \"Initial commit\"     git push -u origin main     Nachdem die GitHub Action gelaufen ist finden sich die Inhalte auf https://dxorsx.github.io/.      Hinweis: dxorsx ist mein GitHub Username. Wollt ihr das nachvollziehen müsst ihr dxorsx durch euren GitHub Username ersetzen.      Jekyll als WebSite Generator  Jekyll ist ein Ruby programmierter Parser der aus Plaintext Dateien eine statische Webseite baut. Einmal konfiguriert und aufgesetzt könnt ihr Inhalte in simplen Text Dateien ablegen und Jekyll kümmert sich darum das alles hübsch formatiert, verlinkt und erreichbar ist.   Jekyll bietet sich für die Nutzung auf GitHub Pages weil es von den GitHub Action unterstützt wird. Das heißt der Jekyll Parser wird in der GitHub Action ausgeführt. Trotz der guten Dokumentation habe ich einige Iterationen gebraucht um ein für mich funktionierende Setup zu finden.   Nachfolgend die Schritte die ich durchgeführt habe, die jeweils aktuelles Konfiguration findet ihr in meine GitHub Repo.   Schritt 1: Erstellen einer lokalen Arbeitsumgebung  Ich beschreibe das Vorgehen anhand einer Debian Linux Umgebung. Wenn ihr etwas anderes verwendet (Windows/macOS/FreeBSD etc.) schaut in die Jekyll Installationsanleitung.   Installiere notwendige Pakete:       sudo apt update     sudo apt install ruby-full build-essential zlib1g-dev     Mit Ruby haben wir auch den Ruby Package Manager “gem” bekommen. Diesen konfigurieren wir:       echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrc     echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc     echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc     source ~/.bashrc     und installieren anschließen Jekyll:       gem install jekyll bundler     Schritt 2: Gemfile anpassen  Das Gemfile editieren und den Eintrag gem \"jekyll\" mit einem # auskommentieren und die Zeile gem \"github-pages\" ergänzen. Da ich das Jekyll Template Minimal Mistakes nutze kommen bei mir noch die Einträge gem \"minimal-mistakes-jekyll\" und gem \"jekyll-remote-theme\" hinzu.       source \"https://rubygems.org\"     # Hello! This is where you manage which Jekyll version is used to run.     # When you want to use a different version, change it below, save the     # file and run `bundle install`. Run Jekyll with `bundle exec`, like so:     #     #     bundle exec jekyll serve     #     # This will help ensure the proper Jekyll version is running.     # Happy Jekylling!     # gem \"jekyll\", \"~&gt; 4.3.1\"     gem \"github-pages\"     # This is the default theme for new Jekyll sites. You may change this to anything you like.     # gem \"minima\", \"~&gt; 2.5\"     gem \"minimal-mistakes-jekyll\"     gem \"jekyll-remote-theme\"     # If you want to use GitHub Pages, remove the \"gem \"jekyll\"\" above and     # uncomment the line below. To upgrade, run `bundle update github-pages`.     # gem \"github-pages\", group: :jekyll_plugins     # If you have any plugins, put them here!     group :jekyll_plugins do       gem \"jekyll-feed\", \"~&gt; 0.12\"     end      # Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem     # and associated library.     platforms :mingw, :x64_mingw, :mswin, :jruby do       gem \"tzinfo\", \"&gt;= 1\", \"&lt; 3\"       gem \"tzinfo-data\"     end      # Performance-booster for watching directories on Windows     gem \"wdm\", \"~&gt; 0.1.1\", :platforms =&gt; [:mingw, :x64_mingw, :mswin]      # Lock `http_parser.rb` gem to `v0.6.x` on JRuby builds since newer versions of the gem     # do not have a Java counterpart.     gem \"http_parser.rb\", \"~&gt; 0.6.0\", :platforms =&gt; [:jruby]     Die aktuelle Version meines Gemfiles findet ihr im GitHub Repo.      Wichtig: Nachdem ihr das Gemfile angepasst habt müsst ihr bundle install ausführen um alles zu aktualisieren.    Schritt 3: _config.yml anpassen  Die _config.yml ist individuell und muss auch individuell angepasst werden. Ein simple Version kann so aussehen:       domain: my-site.github.io       # if you want to force HTTPS, specify the domain without the http at the start, e.g. example.com     url: https://my-site.github.io  # the base hostname and protocol for your site, e.g. http://example.com     baseurl: /REPOSITORY-NAME/      # place folder name if the site is served in a subfolder     oder wenn ihr das Minimal Mistakes Template nutzt auch viel größer _config.yml   Schritt 4: Lokal testen  Nachdem ihr alles angepasst habt bleibt der erste Testlauf, dazu bringt Jekyll einen eigenen kleinen WebServer mit den wir mit       bundle exec jekyll server     startet. Ihr könnt dann vom lokalen Rechner aus darauf zu greifen http://127.0.0.1:4000 vergesst nicht den Prozess jedes Mal neu zu starten wenn ihr etwas verändert habt.   Schritt 5: Auf GitHub veröffentlichen  Wenn ihr nun die Inhalte auf GitHub veröffentlicht:   git add --all git commit -m \"Initial commit\" git push -u origin main  Könnt ihr in eurem GitHub Repository unter Actions den Status einsehen und falls etwas schiefgeht im Logfile nach Hinweisen suchen.   ","categories": ["Blog","DNP-DS-RX1HS","Raspberry-Pi","CUPS","AirPrint"],
        "tags": [],
        "url": "/blog/dnp-ds-rx1hs/raspberry-pi/cups/airprint/Print-HotFolder2DNP-PhotoPrinter/",
        "teaser": "/assets/images/500x300_teaser.jpg"
      },{
    "title": "About",
    "excerpt":"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com   You can find the source code for Minima at GitHub: jekyll / minima   You can find the source code for Jekyll at GitHub: jekyll / jekyll   ","url": "http://localhost:4000/about/"
  },{
    "title": "Blog",
    "excerpt":"Latest Posts \r \r   \r     \r       DNP DS-RX1HS mit Gutenprint, Raspberry Pi und CUPS AirPrint fähig machen \r       Der [DS-RX1HS][dnp-hp] von DNP ist ein 6 Zoll Fotodrucker. Mithilfe eines Raspberry Pi und ein bisschen freier Software wird der Drucker AirPrint fähig und akzeptiert Fotos direkt vom Apple iPhone.   \r     \r   \r     \r       Jekyll und GitHub Pages als Blog einrichten \r       GitHub bietet neben dem Code Repository auch die Möglichkeit Webseiten für seine Projekte zu hosten.   \r     \r   \r     \r       Welcome to Jekyll! \r       You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   \r     \r   \r ","url": "http://localhost:4000/blog/"
  }]
